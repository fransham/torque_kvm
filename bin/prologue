#!/usr/bin/env python

##############################################
# 
# This is a prologue script for torque.  It 
# will boot a virtual machine for a job.
#
##############################################
import sys
import commands
import os
import time
import libvirt
import re
import ConfigParser

try:
    import sqlite3
except:
    from pysqlite2 import dbapi2 as sqlite3


# prologue gets 7 arguments:
# 1 -- jobid
# 2 -- userid
# 3 -- grpid
# 4 -- job name
# 5 -- list of requested resources
# 6 -- queue
# 7 -- job account
jobid=sys.argv[1]
userid=sys.argv[2]
groupid=sys.argv[3]
requested_resources=sys.argv[5]
queue=sys.argv[6]

print '''
------------------------------------------------------------------
TORQUE PROLOGUE:
  jobid:               '''+jobid+'''
  userid:              '''+userid+'''
  requested resources: '''+requested_resources+'''
  queue:               '''+queue

bits=jobid.split('.')
uuid='vm-'+bits[0]

#parameters
config = ConfigParser.ConfigParser()
config.read('/etc/torque-kvm.conf')
torque_home=config.get("torque","torque_home")
vmrundir = config.get("virt", "vmrundir")

dbfile=torque_home + "/net/network.db"
lockfile=torque_home + "/net/db.lock"
target_hostfile=torque_home+"/virt/"+jobid

# get keyword:
keyword=''
if re.match('.*other=.*', requested_resources):
	request = re.split(',',requested_resources.rstrip())
	for resource in request:
		if resource.startswith('other='):
			keyword = re.split('=',resource)[1]
			break
print keyword
# get image path:
request = config.get('resources','map')
rules = request.split(';')
imagefile = None
for rule in rules:
	sections = rule.strip().split(' ')
	if ( ( sections[0] == queue or sections[0] == '%' ) and
		 ( sections [1] == keyword or sections[1] == '%') and
		 ( sections [2] == userid or sections[2] == '%') and
		 ( sections [3] == groupid or sections[3] == '%') ):
		imagefile=sections[4].strip()

#check if we want a baremetal session:
if imagefile == None or imagefile == "None":
	print '  session type:        baremetal'
	print '''------------------------------------------------------------------'''		
	sys.exit(0)

if not os.path.exists(imagefile):
	print ' Cannot file image file: '+imagefile
	sys.exit(1)

print '  imagefile:           '+imagefile

#clone the image:
target=vmrundir+'/'+uuid
(ret, out) = commands.getstatusoutput('qemu-img create -b '+imagefile+' -f qcow2 '+target)
if (ret != 0):
	print "Error creating image.  Error message follows:" 
	print out
	sys.exit(1)

#get a lock on the database
count=0
while(count < 60):
	try:
		os.mkdir(lockfile)
		break
	except OSError:
		time.sleep(1)
		count+=1

if (count >= 60):
	print "could not acquire lock on db... exiting."
	sys.exit(1)

#now we have an exclusive lock on the database, get an unused mac address:
conn=sqlite3.connect(dbfile)
c=conn.cursor()
c.execute('select * from reservations where inuse = 0')

try:
	(host,ip,mac,inuse) = c.next()
except StopIteration:
	print "no free network slots!"
	os.rmdir(lockfile)
	c.close()
	sys.exit(1)

# update the db
c.execute("update reservations set inuse = 1 where hostname=?",[host])
conn.commit()

#release the lock
os.rmdir(lockfile)
c.close()

# create the libvirt xml for our domain
xmldesc="""<domain type='kvm'>
  <name>"""+uuid+"""</name>
  <memory>2097152</memory>
  <currentMemory>2097152</currentMemory>
  <vcpu>1</vcpu>
  <os>
    <type arch='x86_64' machine='rhel5.4.0'>hvm</type>
    <boot dev='hd'/>
  </os>
  <clock offset='utc'>
    <timer name='pit' tickpolicy='delay'/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <devices>
    <emulator>/usr/libexec/qemu-kvm</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='"""+target+"""'/>
      <target dev='hda' bus='ide'/>
      <address type='drive' controller='0' bus='0' unit='0'/>
    </disk>
    <controller type='ide' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    <interface type='bridge'>
      <mac address='"""+mac+"""'/>
      <source bridge='br0'/>
      <target dev='"""+uuid+"""-0'/>
      <model type='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>
  </devices>
</domain>

"""

# Boot the vm
try:
	lconn = libvirt.open(None)
	dom = lconn.createLinux(xmldesc, 0)
except:
	print "Error creating virtual machine.  Is libvirtd running?"
	c=conn.cursor()
	c.execute("update reservations set inuse = 1 where hostname=?",[host])
	conn.commit()
	c.close()
	sys.exit(1)

if dom == None:
    print 'Virtual machine creation failed'
    sys.exit(1)


# write the hostname of the booted vm to a file so that the
# user's job can read it:
print "  host:                " + host
jobfile = open(target_hostfile,'w')
jobfile.write(host)
jobfile.close()
os.chmod(target_hostfile,644)

print '''------------------------------------------------------------------

'''

#vm created! 
sys.exit(0)
