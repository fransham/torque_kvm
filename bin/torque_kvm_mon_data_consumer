#!/usr/local/bin/python2.7
import sys
import time
import MySQLdb
import pika
import json
import ConfigParser
import logging
import pprint

class TorqueKvmMonDataConsumer():

    db_host = None
    db_user = None
    db_password = None
    db_name = None
    amqp_host = None
    amqp_exchange = None

    def __init__(self):
        logging.basicConfig(filename='/var/log/torque_kvm_mon_data_consumer.log', level=logging.DEBUG, format='%(asctime)s %(message)s')
        
        config = ConfigParser.ConfigParser()
        try:
            config.readfp(open('/etc/torque_kvm_mon_data_consumer.conf'))
        except Exception, e:
            logging.critical('Error reading configuration file.\n%s' % (e))
            sys.exit(1)

        self.db_host = config.get('defaults', 'db_host')
        self.db_user = config.get('defaults', 'db_user')
        self.db_password = config.get('defaults', 'db_password')
        self.db_name = config.get('defaults', 'db_name')
        self.amqp_host = config.get('defaults', 'amqp_host')
        self.amqp_exchange = config.get('defaults', 'amqp_exchange')


    def consume_data(self):
        connection = pika.BlockingConnection(pika.ConnectionParameters(host=self.amqp_host))

        channel = connection.channel()
        channel.exchange_declare(exchange=self.amqp_exchange, type='fanout')
        result = channel.queue_declare(exclusive=True)
        queue_name = result.method.queue
        channel.queue_bind(exchange=self.amqp_exchange, queue=queue_name)
        channel.basic_consume(self.process_stats, queue=queue_name, no_ack=True)

        logging.info('Listening for incoming stats...')
        try:
            channel.start_consuming()
        except KeyboardInterrupt, e:
            logging.info('Exiting because of keyboard interrupt.')

        connection.close()
        logging.info('Connection to amqp host closed.')        

    
    def process_stats(self, ch, method, properties, body):
        try:
            data = json.loads(body)
            key = data['key']

            logging.debug('Received %s data for %s' % (key, data['instance_uuid']))

            db = MySQLdb.connect(user=self.db_user, passwd=self.db_password, db=self.db_name)
            logging.info('Connected to database %s on %s as %s' % (self.db_name, self.db_host, self.db_user))

            c = db.cursor()

            #
            # Here we decide what to do with the data depending on its key.
            # For this we simply use one big if/elif statement.  Add your new
            # data handlers here.
            #
            # If this part of the code gets too big, we might break each of the
            # data handling parts into individual classes.  --Andre
            #
            if key == 'boot_process_start':
                c.execute("""INSERT INTO data SET
                instance_uuid = %s,
                vm_image = %s,
                mac = %s,
                nic = %s,
                ncpus = %s,
                memory = %s,
                hostname = %s,
                user = %s,
                boot_process_start = FROM_UNIXTIME(%s);""",
                          (data['instance_uuid'],
                           data['data'][0],
                           data['data'][1],
                           data['data'][2],
                           data['data'][3],
                           data['data'][4],
                           data['data'][5],
                           data['data'][6],
                           data['timestamp'])
                          )
                logging.debug('boot_process_start record written to db')

            elif key == 'boot_process_end':
                c.execute("""UPDATE data SET boot_process_end = FROM_UNIXTIME(%s) WHERE instance_uuid = %s;""",
                          (data['timestamp'],
                           data['instance_uuid'])
                          )
                logging.debug('boot_process_end record written to db')

            elif key == 'shutdown_process_start':
                c.execute("""UPDATE data SET shutdown_process_start = FROM_UNIXTIME(%s) WHERE instance_uuid = %s;""",
                          (data['timestamp'],
                           data['instance_uuid'])
                          )
                logging.debug('shutdown_process_start record written to db')

            elif key == 'shutdown_process_end':
                c.execute("""UPDATE data SET shutdown_process_end = FROM_UNIXTIME(%s) WHERE instance_uuid = %s;""",
                          (data['timestamp'],
                           data['instance_uuid'])
                          )
                logging.debug('shutdown_process_end record written to db')

            else:
                logging.warning('Received data with unrecognized key: %s' % (key))

            c.close()
            db.close()
            logging.info('Connection to database closed.')

        except Exception, e:
            logging.error('Error processing incoming data.\n%s' % (e))



if __name__ == "__main__":
    data_consumer = TorqueKvmMonDataConsumer()
    data_consumer.consume_data()

    
