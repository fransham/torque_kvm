#!/usr/local/bin/python2.7

import cgi
import cgitb
from xml.dom.minidom import parse, parseString
import os
import sys
import subprocess


def getText(nodelist):
    rc = []
    for node in nodelist:
        if node.nodeType == node.TEXT_NODE:
            rc.append(node.data)
    return ''.join(rc)

def user_has_role(user, role):
    for line in open('/etc/neptune.sao.nrc.ca/htgroup'):
        r = line.strip().split(':')[0]
        if r == role:
            users = line.strip().split(':')[1].split(',')
            return user in users
    return False

def node_to_html(node):
    if node.nodeType == node.ELEMENT_NODE:
        html ='<tr>'
        html += '<td><b>%s</b></td>' % (node.localName)

        html += '<td>'
        if node.hasChildNodes() and node.childNodes[0].nodeType == node.TEXT_NODE:
            html += node.childNodes[0].data
        elif node.hasChildNodes():
            html += '<table border=1>'
            for child_node in node.childNodes:
                html += '%s' % (node_to_html(child_node))
            html += '</table>'
        html += '</td>'
        
        html += '</tr>'
        return html


cgitb.enable()
form = cgi.FieldStorage()

    
# Get unix user from Drupal user
username_mapping = {}
for line in open('/etc/neptune.sao.nrc.ca/drupal-to-unix.mapping'):
    username_mapping[line.split(':')[0]] = line.split(':')[1]

if not 'REMOTE_USER' in os.environ:
    print "Content-Type: text/html"     # HTML is following
    print                               # blank line, end of headers
    print "This feature requires user authentication."
    sys.exit(0)

remote_user = os.environ['REMOTE_USER']

if remote_user not in username_mapping:
    print "Content-Type: text/html"     # HTML is following
    print                               # blank line, end of headers
    print "You are not authorized to access this data."
    sys.exit(0)

print "Content-Type: text/html"     # HTML is following
print                               # blank line, end of headers

if 'job_id' in form:
    job_id = form['job_id'].value
    qstat_output = subprocess.check_output(["/usr/local/torque-2.5.5/bin/qstat", "-x", job_id])
    if qstat_output == '':
        print 'The job %s does not exist on the server.' % (job_id)
    else:
        dom = parseString(qstat_output)
        job = dom.getElementsByTagName("Job")[0]
        job_owner = getText(job.getElementsByTagName("Job_Owner")[0].childNodes)
        if not user_has_role(remote_user, 'pbs_admin') or job_owner == '%s@neptune.sao.nrc.ca' % username_mapping[remote_user]:
            print 'You do not have permission to view information about this job.'
        else:
            print '<table border=1>%s</table>' % (node_to_html(job))
        
   

else:
    qstat_output = subprocess.check_output(["/usr/local/torque-2.5.5/bin/qstat", "-x"])
    
    if qstat_output == '':
        print 'No job currently exist on the server.'
    else:
        dom = parseString(qstat_output)

        jobs = {}

        num_of_queued_jobs = 0
        num_of_running_jobs = 0
        for job in dom.getElementsByTagName("Job"):
            job_id = getText(job.getElementsByTagName("Job_Id")[0].childNodes)
            job_name = getText(job.getElementsByTagName("Job_Name")[0].childNodes)
            job_owner = getText(job.getElementsByTagName("Job_Owner")[0].childNodes)
            job_queue = getText(job.getElementsByTagName("queue")[0].childNodes)
            job_state = getText(job.getElementsByTagName("job_state")[0].childNodes)
            job_walltime = getText(job.getElementsByTagName("walltime")[0].childNodes)
            # TODO:
            # put code here to extract submission (queued) time and start time

            if user_has_role(remote_user, 'pbs_admin') or job_owner == '%s@neptune.sao.nrc.ca' % username_mapping[remote_user]:
                jobs[job_id] = {}
                jobs[job_id]['name'] = job_name
                jobs[job_id]['owner'] = job_owner
                jobs[job_id]['queue'] = job_queue
                jobs[job_id]['state'] = job_state
                jobs[job_id]['walltime'] = job_walltime



        if len(jobs) == 0:
            print 'You currently have no jobs on this server.'
        else:
            print '<table>'
            print '<tr>'
            print '<th>ID</th>'
            print '<th>Name</th>'
            print '<th>Owner</th>'
            print '<th>Queue</th>'
            print '<th>Walltime</th>'
            print '<th>State</th>'
            print '</tr>'

            for job_id in sorted(jobs.keys()):
                print '<tr>'
                print """<td><button style="border:none; background:transparent; cursor: pointer;" onclick="jQuery.get('https://neptune.sao.nrc.ca/cloud/cgi-auth/display_torque_stats?job_id=%s', function( data ) {jQuery('#torque_stats').html( data );});">%s</button></td>""" % (job_id, job_id)
                print '<td>%s</td>' % jobs[job_id]['name']
                print '<td>%s</td>' % jobs[job_id]['owner']
                print '<td>%s</td>' % jobs[job_id]['queue']
                print '<td>%s</td>' % jobs[job_id]['walltime']
                print '<td>%s</td>' % jobs[job_id]['state']
                print '</tr>'
            print '</table>'


sys.exit(0)



